local Luna = loadstring(game:HttpGet("https://raw.githubusercontent.com/Nebula-Softworks/Luna-Interface-Suite/refs/heads/main/source.lua"))()

local Window = Luna:CreateWindow({
    Name = "Sterling Hub",
    Subtitle = nil,
    LogoID = "nil",
    LoadingEnabled = true,
    LoadingTitle = "Sterling Hub",
    LoadingSubtitle = "by DAN",

})

Window:CreateHomeTab({
	SupportedExecutors = {}, -- A Table Of Executors Your Script Supports. Add strings of the executor names for each executor.
	DiscordInvite = "pvwpXmTmT7", -- The Discord Invite Link. Do Not Include discord.gg/ | Only Include the code.
	Icon = 1, -- By Default, The Icon Is The Home Icon. If You would like to change it to dashboard, replace the interger with 2
})

local Tab = Window:CreateTab({
    Name = "Main",
    Icon = "view_in_ar",
    ImageSource = "Material",
    ShowTitle = true
})

Tab:CreateSection("Insta Level Quest")

local instaLevelQuestEnabled = false  -- Toggle state for Insta Level Quest
local delayTime = 0  -- Delay time for taking quests

-- Default values for quest parameters
local questParams = {
    exp = 0,
    cash = 0,
    essence = 0,
    chestMeter = 0,
}

-- Create the toggle for Insta Level Quest
Tab:CreateToggle({
    Name = "Auto Quest",
    CurrentValue = instaLevelQuestEnabled,
    Callback = function(State)
        instaLevelQuestEnabled = State
    end
})

-- Create a slider for delay time
Tab:CreateSlider({
    Name = "Quest Delay (Seconds)",
    Range = {0, 10},  -- Minimum delay
    Increment = 1,
    CurrentValue = delayTime,
    Callback = function(Value)
        delayTime = Value
    end
})

-- Create a slider for delay time
Tab:CreateSlider({
    Name = "EXP",
    Range = {0, 8000000},  -- Minimum delay
    Increment = 1,
    CurrentValue = questParams.exp,
    Callback = function(Value)
        questParams.exp = Value
    end
})

-- Create a slider for delay time
Tab:CreateSlider({
    Name = "CASH",
    Range = {0, 50000},  -- Minimum delay
    Increment = 1,
    CurrentValue = questParams.cash,
    Callback = function(Value)
        questParams.cash = Value
    end
})

-- Create a slider for delay time
Tab:CreateSlider({
    Name = "ESSENCE",
    Range = {0, 25},  -- Minimum delay
    Increment = 1,
    CurrentValue = questParams.essence,
    Callback = function(Value)
        questParams.essence = Value
    end
})

-- Create a slider for delay time
Tab:CreateSlider({
    Name = "CHEST METER",
    Range = {0, 75},  -- Minimum delay
    Increment = 1,
    CurrentValue = questParams.chestMeter,
    Callback = function(Value)
        questParams.chestMeter = Value
    end
})

local folder = game.Players.LocalPlayer.ReplicatedTempData  -- Correct path to ReplicatedTempData

local function pressJ()
    game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.J, false, game)
end

local function checkAndFireRemote()
    if instaLevelQuestEnabled then
        -- Check if ReplicatedTempData is empty
        if #folder:GetChildren() == 0 then
            local TweenService = game:GetService("TweenService")

local function Tween(Object1, Object2, Speed, Offset, Wait)
    if Object1 and Object2 then
        local Timing = (Object1.Position - Object2.Position).Magnitude / Speed
        local TweenInfo = TweenInfo.new(Timing, Enum.EasingStyle.Linear)
        local TweenSystem = TweenService:Create(Object1, TweenInfo, {CFrame = Object2.CFrame + Offset})
        TweenSystem:Play()
        if Wait then
            TweenSystem.Completed:Wait()
        end
    end
end

local function tweenToPortal()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local missionPortal = workspace.Objects.Portals.Missions

    if character and character.PrimaryPart and missionPortal then
        local offset = Vector3.new(0, 0, 0)  -- Adjust the offset if needed
        local speed = 10000  -- Set the desired speed for the tween
        Tween(character.PrimaryPart, missionPortal, speed, offset, true)
    end
end
tweenToPortal()          
            
            -- Add a delay before taking the quest based on the delayTime
            wait(delayTime)

            local ohTable1 = {
                ["type"] = "Band",
                ["set"] = "Shijo Town Set",
                ["rewards"] = {
                    ["essence"] = questParams.essence,
                    ["chestMeter"] = questParams.chestMeter,
                    ["exp"] = questParams.exp,
                    ["cash"] = questParams.cash
                },
                ["rewardsText"] = string.format("$%d | %d EXP | %d Mission Essence", questParams.cash, questParams.exp, questParams.essence),
                ["difficulty"] = 3,
                ["title"] = "Defeat a band",
                ["amount"] = 1,
                ["level"] = 420,
                ["grade"] = "Non Sorcerer",
                ["subtitle"] = "of 2 curse users"
            }
            game:GetService("ReplicatedStorage").Remotes.Server.Data.ClaimQuest:InvokeServer(ohTable1)
        end
    end
end

local function TrulyVisible(Frame: Instance)
    local screenGui = Frame:FindFirstAncestorWhichIsA("ScreenGui")
    if not screenGui or not screenGui.Enabled then
        return false
    end

    while Frame and Frame.Parent do
        if Frame:IsA("GuiObject") and not Frame.Visible then
            return false
        end
        Frame = Frame.Parent
    end

    return true
end

local warpHint = game.Players.LocalPlayer.PlayerGui.Main.Frame.BottomMiddle.WarpHint

game:GetService("RunService").Heartbeat:Connect(function()
    if instaLevelQuestEnabled then
        checkAndFireRemote()
    end

    -- Check if WarpHint is visible and trigger pressing "J"
    if TrulyVisible(warpHint) then
        pressJ()
    end
end)


Tab:CreateSection("Instakill")

local instaKillEnabled = false
local range = 50
local tweenToMobEnabled = false
local tweenSpeed = 2
local tweenRange = 50

Tab:CreateSlider({
    Name = "Kill Range",
    Range = {10, 1000},
    Increment = 5,
    CurrentValue = range,
    Callback = function(Value)
        range = Value
    end
})

Tab:CreateToggle({
    Name = "Enable Insta-Kill",
    CurrentValue = false,
    Callback = function(State)
        instaKillEnabled = State
    end
})

Tab:CreateSection("Tweening")

Tab:CreateToggle({
    Name = "Tween to Near Mobs",
    CurrentValue = false,
    Callback = function(State)
        tweenToMobEnabled = State
    end
})

Tab:CreateSlider({
    Name = "Tweening Range",
    Range = {5, 5000},
    Increment = 5,
    CurrentValue = tweenRange,
    Callback = function(Value)
        tweenRange = Value
    end
})

Tab:CreateSlider({
    Name = "Tween Speed",
    Range = {0.5, 5000},
    Increment = 1,
    CurrentValue = tweenSpeed,
    Callback = function(Value)
        tweenSpeed = Value
    end
})

local tweenPosition = "On Top"  -- Initialize variable
Tab:CreateDropdown({
    Name = "Tween Position",
    Options = {"On Top", "Under", "Behind"},
    CurrentOption = tweenPosition,
    Callback = function(Selected)
        tweenPosition = Selected
    end
})

local positionOffset = 1
Tab:CreateSlider({
    Name = "Position Offset",
    Range = {1, 50},
    Increment = 1,
    CurrentValue = positionOffset,
    Callback = function(Value)
        positionOffset = Value
    end
})

local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Player = Players.LocalPlayer

local Mag = function(Pos1, Pos2)
    return (Pos1.Position - Pos2.Position).Magnitude
end

local Tween = function(Object1, Object2, Speed, Offset, Wait)
    if Object1 and Object2 then
        local Timing = Mag(Object1, Object2) / Speed
        local TweenInfo = TweenInfo.new(Timing, Enum.EasingStyle.Linear)
        local TweenSystem = TweenService:Create(Object1, TweenInfo, {CFrame = CFrame.new(Object2.Position + Offset)})
        TweenSystem:Play()
        if Wait then
            TweenSystem.Completed:Wait()
        end
    end
end

-- Perform Insta-Kill only when the Insta-Kill toggle is enabled
local function performInstaKill()
    if not instaKillEnabled then return end

    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local origin = character.PrimaryPart.Position

    for _, mob in pairs(workspace.Objects.Mobs:GetChildren()) do
        if mob:IsA("Model") and mob.PrimaryPart then
            local distance = (mob.PrimaryPart.Position - origin).Magnitude
            if distance <= range then
                local humanoid = mob:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid.Health = 0
                end
            end
        end
    end
end

local function NoClip()
    for _, v in next, Player.Character:GetChildren() do
        if v:IsA("BasePart") and v.CanCollide then
            v.CanCollide = false
        end
    end
end

local function performTweenToMobs()
    if not tweenToMobEnabled then return end

    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()

    NoClip()  -- Enable NoClip during Tweening

    for _, mob in pairs(workspace.Objects.Mobs:GetChildren()) do
        if mob:IsA("Model") and mob.PrimaryPart then
            local distance = (mob.PrimaryPart.Position - character.PrimaryPart.Position).Magnitude
            if distance <= tweenRange then
                local offset = Vector3.new(0, 0, 0)

                -- Set position offset based on selected option
                if tweenPosition == "On Top" then
                    offset = Vector3.new(0, positionOffset, 0)
                elseif tweenPosition == "Under" then
                    offset = Vector3.new(0, -positionOffset, 0)
                elseif tweenPosition == "Behind" then
                    offset = Vector3.new(0, 0, -positionOffset)
                end

                Tween(character.PrimaryPart, mob.PrimaryPart, tweenSpeed, offset, true)
            end
        end
    end
end


game:GetService("RunService").Stepped:Connect(function()
    if instaKillEnabled then
        performInstaKill()  -- Execute Insta-Kill logic when enabled
    end
    if tweenToMobEnabled then
        performTweenToMobs()  -- Execute Tweening logic when enabled
    end
end)

local Misc = Window:CreateTab({
    Name = "Misc",
    Icon = "view_in_ar",
    ImageSource = "Material",
    ShowTitle = true
})



local autopromoteEnabled = false

Misc:CreateToggle({
    Name = "Auto Promote",
    CurrentValue = autopromoteEnabled,
    Callback = function(Value)
        autopromoteEnabled = Value
    end
})

local function performautopromote()
    if autopromoteEnabled then
        local ohString1 = "Clan Head Jujutsu High"
        local ohString2 = "Promote"
        game:GetService("ReplicatedStorage").Remotes.Server.Dialogue.GetResponse:InvokeServer(ohString1, ohString2)
    end
end

game:GetService("RunService").Heartbeat:Connect(function()
    performautopromote()
end)

local autoCollectEnabled = false  -- Variable to store the toggle state
local delayTime = 0  -- Variable to store the delay time (in seconds)
local lastFired = 0  -- Store the time of the last prompt firing
local ProximityPromptService = game:GetService("ProximityPromptService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- Create the toggle for Auto Collect Chest
Misc:CreateToggle({
    Name = "Auto Collect Chest (Turn on your autoclicker)",
    CurrentValue = autoCollectEnabled,
    Callback = function(Value)
        autoCollectEnabled = Value
    end
})

-- Create the slider for setting delay time
Misc:CreateSlider({
    Name = "Fire Proximity Prompt Delay (Seconds)",
    Min = 0,  -- Minimum delay (no delay)
    Max = 10,  -- Maximum delay (10 seconds)
    CurrentValue = delayTime,  -- Initial value
    Callback = function(Value)
        delayTime = Value  -- Update delayTime with the slider value
    end
})

-- Function to fire proximity prompt with delay
ProximityPromptService.PromptShown:Connect(function(prompt)
    local currentTime = tick()  -- Get the current time

    -- Check if enough time has passed since the last prompt was fired
    if autoCollectEnabled and (currentTime - lastFired >= delayTime) then
        -- Fire the proximity prompt
        fireproximityprompt(prompt)
        
        -- Update lastFired to the current time
        lastFired = currentTime
    end
end)


Misc:CreateSection("Free Innate Slots, Skip Spins")

local Button = Misc:CreateButton({
    Name = "Grant Gamepasses",
    Callback = function()
                Luna:Notification({
                Title = "Success",
                Content = "Granted Gamepasses",
                ImageSource = "Material",
                Icon = "notifications_active",
                Time = 5
})
        local gamepassIds = {"77102528", "77102481", "77103458", "259500454", "77102969"}
        local player = game:GetService("Players").LocalPlayer
        local replicatedData = player:WaitForChild("ReplicatedData")
        local gamepassesFolder = replicatedData:WaitForChild("gamepasses")

        for _, gamepassId in ipairs(gamepassIds) do
            local gamepassValue = gamepassesFolder:FindFirstChild(gamepassId)

            if not gamepassValue then
                -- If the BoolValue doesn't exist for the gamepass, create and add it
                gamepassValue = Instance.new("BoolValue")
                gamepassValue.Name = gamepassId
                gamepassValue.Value = true
                gamepassValue.Parent = gamepassesFolder
                print("Inserted BoolValue for game pass with ID:", gamepassId)
            else
                print("BoolValue for game pass with ID already exists:", gamepassId)
            end
        end
    end
})
Misc:CreateSection("Skill Giver(Not Perm)")

-- Create a dropdown for selecting mode (Innates or Skills)
local modeSelected = "Innates"
local DropDown = Misc:CreateDropdown({
    Name = "Select Mode",
    Options = {"Innates", "Skills"},
    CurrentOption = {"Innates"},
    Callback = function(value)
        modeSelected = value
    end
})

-- Input box for skill name
local skillName
local Input = Misc:CreateInput({
    Name = "Enter Skill/Innate Skill",
    CurrentValue = "",
    TextDisappear = false,  -- Changed to false so text stays visible
    Callback = function(value)
        print("Entered skill: " .. value)
        skillName = value  -- Store the value entered in the textbox here
    end
})

-- Dropdown for selecting keybind (B, C, etc.)
local keybindSelected = "B"
local DropDown = Misc:CreateDropdown({
    Name = "Select Keybind",
    Options = {"B", "C", "G", "T", "V", "X", "Y", "Z"},
    CurrentOption = {"B"},
    Callback = function(value)
        keybindSelected = value
    end
})

-- Button to assign the skill
local Button = Misc:CreateButton({
    Name = "Assign Skill/Innate Skill",
    Callback = function()
        -- Ensure the skillName is set
        if not skillName or skillName == "" then
            Luna:Notification({
                Title = "Error",
                Content = "Please enter a skill name.",
                ImageSource = "Material",
                Icon = "notifications_active",
                Time = 5
            })
            return
        end

        -- Handle skill assignment to the selected mode and keybind
        local player = game:GetService("Players").LocalPlayer
        local techniques = player:WaitForChild("ReplicatedData"):WaitForChild("techniques")
        local selectedFolder
        if modeSelected == "Innates" then
            selectedFolder = techniques:WaitForChild("innates")
        elseif modeSelected == "Skills" then
            selectedFolder = techniques:WaitForChild("skills")
        end

        if selectedFolder then
            local stringValue = selectedFolder:FindFirstChild(keybindSelected)
            if stringValue and stringValue:IsA("StringValue") then
                stringValue.Value = skillName
                print("Skill assigned: " .. skillName)
                Luna:Notification({
                    Title = "Skill Assigned",
                    Content = "The skill '" .. skillName .. "' has been assigned to " .. keybindSelected,
                    Image = "Material",  -- Custom icon (use your own if needed)
                    Icon = "notifications_active",
                    Time = 5
                })
            else
                Luna:MakeNotification({
                    Title = "Error",
                    Content = "No StringValue found for " .. keybindSelected .. " in " .. modeSelected,
                    Icon = "notifications_active",
                    ImageSource = "Material",  -- Custom icon (use your own if needed)
                    Time = 5
                })
            end
        else
            Luna:Notification({
                Title = "Error",
                Content = "Selected folder (" .. modeSelected .. ") does not exist.",
                ImageSource = "Material",
                Icon = "notifications_active",
                Time = 5
            })
        end
    end
})

-- Create a tab
local Tab = Window:CreateTab({
    Name = "Move Redeemer",
    Icon = "check",
    ImageSource = "Material",
    ShowTitle = true,
})

local moveName = ""

local Input = Tab:CreateInput({
	Name = "Move Redeemer(Perm needs money and mastery)",
	Description = nil,
	PlaceholderText = "Input Placeholder",
	CurrentValue = "", -- the current text
	Numeric = false, -- When true, the user may only type numbers in the box (Example walkspeed)
	MaxCharacters = nil, -- if a number, the textbox length cannot exceed the number
	Enter = false, -- When true, the callback will only be executed when the user presses enter.
    	Callback = function(Text)
        moveName = Text
       	 -- The function that takes place when the input is changed
	 -- The variable (Text) is a string for the value in the text box
    	end
}, "Input")

local Button = Tab:CreateButton({
    Name = "Redeem Move",
    Callback = function()
        if moveName and moveName ~= "" then
            -- Call the server with the entered move name
            game:GetService("ReplicatedStorage").Remotes.Server.Data.UnlockStatNode:InvokeServer(moveName)
            print("Redeemed move:", moveName)
        else
            warn("Please enter a move name!")
        end
    end,
})
