getgenv().STERLINGLOADERINSTANCES = getgenv().STERLINGLOADERINSTANCES or {}

if getgenv().STERLINGLOADERINSTANCES and not getmetatable(getgenv().STERLINGLOADERINSTANCES) then
	setmetatable(getgenv().STERLINGLOADERINSTANCES, {
		__index = function(self, key)
			if key == "Len" then
				local Len = 0

				for i, v in pairs(self) do
					Len = Len + 1
				end

				return Len
			end

			return rawget(self, key)
		end;
	})
elseif getgenv().STERLINGLOADERINSTANCES and getmetatable(getgenv().STERLINGLOADERINSTANCES) then
	if getgenv().STERLINGLOADED then
		warn("An instance is already running.")
	end
end

script_key=script_key or "";

getgenv().STERLINGSETTINGS = getgenv().STERLINGSETTINGS or {
	OverwriteConfiguration = false;
	QueueOnTeleport = false;
}

loadstring([[
	function LPH_NO_VIRTUALIZE(f) return f end;

	function LPH_JIT(f) return f end;  

	function LPH_JIT_MAX(f) return f end;
]])();
pcall(function()
    for _,v in next, getconnections(game:GetService("LogService").MessageOut) do v:Disable() end
end)
local InterfaceEnabled = false

local IsInterfaceEnabled = function()
	local InterfaceEnabled = false

	if type(script_key) ~= "string"
	or #script_key < 16 then
		InterfaceEnabled = true
	else
		if type(script_key) == "string"
		and #script_key >= 16 then
			script_key = script_key:gsub("%W", "")
		end

		if type(script_key) ~= "string"
		or #script_key < 16 then
			InterfaceEnabled = true
		end
	end

	return InterfaceEnabled
end

InterfaceEnabled = IsInterfaceEnabled()

-- Library
local Library = (getgenv and getgenv().STERLINGLIBRARY) or loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()

getgenv().STERLINGLIBRARY = Library

local service = setmetatable({}, {
	__index = function(self, key)
		return (cloneref or function(service) return service end)(game.GetService(game, key))
	end
})

-- Variables
local ServiceIdentifier = "sterling" or "(__YourServiceIdentifier__)"
local ServiceName = "Sterling" or "(__YourServiceName__)"
local APIToken = "Sniper" or "(__YourAPIToken__)"
local KeyPrefix = "Sterling_" or "(__YourKeyPrefix__)"
local KeyDirectory = "Sterling" or "(__YourKeyDirectory__)"

-- Services
local HttpService = service.HttpService

local Cache = {
	Local = {};
}

local Debounce = {
}

-- Settings
local RootDir = ServiceName
		
if not (isfile(RootDir) or isfolder(RootDir)) then
	makefolder(RootDir)
end

local Dir = ("%s/Loader"):format(RootDir)

if not (isfile(Dir) or isfolder(Dir)) then
	makefolder(Dir)
end

local Data = {
	Toggle = {
		["General"] = true;
		["Loader.Load: Queue On Teleport"] = false;
	};
	Dropdown = {
	};
	Slider = {
	};
	Input = {
		["Loader.Load: Key"] = "";
	};
	Keybind = {
	};
}

local BlacklistedData = {
	Toggle = {
		["General"] = true;
	};
	Dropdown = {
	};
	Slider = {
	};
	Input = {
	};
	Keybind = {
	};
}

if isfile(Dir .. "/config.json") then
	for key, value in pairs(HttpService:JSONDecode(readfile(Dir .. "/config.json"))) do
		for key2, value2 in pairs(value) do
			if type(Data[key]) == "table" then
				if not BlacklistedData[key][key2] then
					if type(Data[key][key2]) == type(value2) then
						Data[key][key2] = value2
					end
				end
			end
		end
	end
end

local Interfaces = {}

local httprequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request

local RunLoader = (function(write)
	local Projects = {
		["BLR"] = {
			PlaceIds = {18668065416, 92517437168342, 82577947590704, 99999183305180, 115110570222234, 140149476595556, 90216279544722};
			Loader = "https://api.luarmor.net/files/v3/loaders/43be019e4c6349cc73b79704a3ff2a75.lua";
		};
		["haikyu"] = {
			PlaceIds = {73956553001240, 74691681039273, 79136731857959, 86789627188240, 96802054849934, 103521881639626, 109684591839194, 122069199001617, 134314141048307};
			Loader = "https://api.luarmor.net/files/v3/loaders/d94cc31e79d775c1a7be52e8b9dacfd3.lua";
		};
		["kuroko"] = {
			PlaceIds = {18668065416};
			Loader = "https://api.luarmor.net/files/v3/loaders/cb313511a94ffd1166c06baf1dc54158.lua";
		};
		["azurelatch"] = {
			PlaceIds = {94647229517154};
			Loader = "https://api.luarmor.net/files/v3/loaders/d5d2ca4f5159ea5faa9307c887daa659.lua";
		};
		["beaks"] = {
			PlaceIds = {122678592501168};
			Loader = "https://api.luarmor.net/files/v3/loaders/821b15b6a892519c346c3abd88ae80ec.lua";
		};
		["bbz"] = {
			PlaceIds = {130739873848552, 129230994638464};
			Loader = "https://api.luarmor.net/files/v3/loaders/c2a6ece47d481a15f67f64e796bc94cb.lua";
		};
	};

	local Loaded = false

	for i, v in pairs(Projects) do
		for _, placeId in ipairs(v.PlaceIds) do
			if placeId == game.PlaceId then
				local Loader = v.Loader
				Loaded = true

				print("script_key =", script_key)
				print(("Loading %s"):format(i))

				if not write then
					local GETResponse = game.HttpGet(game, Loader)

					if GETResponse then
						getgenv().STERLINGLOADED = true
						(loadstring or load)(GETResponse)()

						if Data.Toggle["Loader.Load: Queue On Teleport"] then
							if not getgenv().STERLINGQUEUEONTELEPORT then
								local queueteleport = (syn and syn.queue_on_teleport) or queue_on_teleport or (fluxus and fluxus.queue_on_teleport)

								if queueteleport then
									getgenv().STERLINGQUEUEONTELEPORT = GETResponse
									queueteleport(('script_key = "%s";\n%s'):format(script_key, getgenv().STERLINGQUEUEONTELEPORT))
								end
							end
						end
					else
						warn(("Could not fetch %s; Suggest switching to an executor that isn't any of the following: Solara and Xeno"):format(Loader or "loader"))
					end
				else
					local InterfaceEnabled = false
					if not script_key or #script_key < 16 then
						InterfaceEnabled = true
					end

					setclipboard(('-- Sterling: %s;\nscript_key = "%s";\n(loadstring or load)(game:HttpGet("%s"))();'):format(i, not InterfaceEnabled and script_key or "", v.Loader))
				end

				print(("Loaded %s"):format(i))
				break
			end
		end
	end

	if not Loaded then
		warn(("Unrecognized PlaceId %d"):format(game.PlaceId))
		setclipboard(tostring(game.PlaceId))
	end
end)


local LoadFunction = function(Library, Window)
	Window:Close()

	RunLoader()

	Library:Notify({
            Title = "Information",
            Content = "Loader",
            Duration = 5,
			Background = "rbxassetid://90804827107744"
        })
	task.spawn(function()
		task.wait(2.5)

		Window:Close(); getgenv().STERLINGLOADERINSTANCES[Library] = nil
	end)
end

local Settings = {
        InviteCode = "Edw24TucqG" 
    }
local DiscordApiUrl = "http://127.0.0.1:%s/rpc?v=1"
	local Window = Library:CreateWindow({
    Title = "Sterling Hub [Loader]",    
    Icon = "door-open",
    Author = "by Dan",
    Folder = nil,
    Size = UDim2.fromOffset(580, 360),
    Transparent = true,
    Theme = "Dark",
    SideBarWidth = 200,
    Background = nil,
    User = {
        Enabled = false,
        Anonymous = true,
        Callback = function()
        end,
    },
}); 
			    local Load = Window:Tab({
                Title = "Loader",
                Icon = nil,
                Locked = false, 
            })
			-- Load: Section
				local Section = Load:Section({
					Title = "Load";
					TextXAlignment = "Left";
					TextSize = 17
				}); 
                    local Toggle = Load:Toggle({
                    Title = "Queue On Teleport",
                    Desc = "Auto Executes On Rejoin",
                    Value = Data.Toggle["Loader.Load: Queue On Teleport"],
                    Icon = nil,
                    Callback = function(Value)
                        Data.Toggle["Loader.Load: Queue On Teleport"] = Value
							
							if Data.Toggle["Loader.Load: Queue On Teleport"] then
								Library:Notify({
                            Title = "Information",
                            Content = "Queueing On Teleport",
                            Duration = 5,
							Background = "rbxassetid://90804827107744"
								})
							end
						end;
                })
				
                    local Button = Load:Button({
                    Title = "Rejoin",
                    Description = nil,
                    Callback = function()
                        game:GetService("TeleportService"):Teleport(game.PlaceId, game:GetService("Players").LocalPlayer)
                end
                })
					local Button = Load:Button({
						Title = "Join Our Discord Server";
                        Description = nil;
						Callback = function()
							setclipboard("https://discord.gg/Edw24TucqG")

							Library:Notify({
                            Title = "Information",
                            Content = "Copied Discord URL",
                            Duration = 5,
							Background = "rbxassetid://90804827107744"
								})

							if httprequest then
								task.spawn(function()
									pcall(function()
                                        for i = 6453, 6464 do
                                        httprequest({
                                            Url = "http://127.0.0.1:" .. i .. "/rpc?v=1",
                                            Method = "POST",
                                            Headers = {
                                                ["Content-Type"] = "application/json",
                                                Origin = "https://discord.com/"
                                            },
                                            Body = HttpService:JSONEncode({
                                                cmd = "INVITE_BROWSER",
                                                nonce = HttpService:GenerateGUID(false),
                                                args = { code = Settings.InviteCode }
                                            })
                                        })
                                        end
									end)
								end)
							end
						end;
					})
                    
					if true then
                        Library:Notify({
                            Title = "Sterling Hub",
                            Content = "You Are Being Invited To Our Discord Server",
                            Duration = 5,
							Background = "rbxassetid://90804827107744"
								})

						if httprequest then
							task.spawn(function()
								pcall(function()
									for i = 6453, 6464 do
                                    httprequest({
                                        Url = "http://127.0.0.1:" .. i .. "/rpc?v=1",
                                        Method = "POST",
                                        Headers = {
                                            ["Content-Type"] = "application/json",
                                            Origin = "https://discord.com/"
                                        },
                                        Body = HttpService:JSONEncode({
                                            cmd = "INVITE_BROWSER",
                                            nonce = HttpService:GenerateGUID(false),
                                            args = { code = Settings.InviteCode }
                                        })
                                    })
                                    end
								end)
							end)
						end
					end
                    local Input = Load:Input({
                    Title = "Key",
                    Desc = nil,
                    Value = Data.Input["Loader.Load: Key"],
                    InputIcon = "bird",
                    Placeholder = "Key here...",
                    Callback = function(Value, Enter) 
                        Data.Input["Loader.Load: Key"] = Value
							
							Cache.script_key = Data.Input["Loader.Load: Key"]:gsub("%W", "")
						end;    
                })

                    local Button = Load:Button({
                    Title = "Load",
                    Description = "Load Key",
                    Callback = function()
                        script_key = Cache.script_key

							InterfaceEnabled = IsInterfaceEnabled()

							if not InterfaceEnabled then
								LoadFunction(Library, Window)
							else
								Library:Notify({
                            Title = "Information",
                            Content = "Invalid Key",
                            Duration = 5,
							Background = "rbxassetid://90804827107744"
								})
							end
						end;
                })

					local Button = Load:Button({
						Title = "Copy Key Url : Get Key (Linkvertise)";
						Desc = nil;
						Callback = function()
							setclipboard("https://ads.luarmor.net/get_key?for=linkvertise-hHaqfFOpTyiY")

							Library:Notify({
                            Title = "Information",
                            Content = "Copied Key URL",
                            Duration = 5,
							Background = "rbxassetid://90804827107744"
                        })
						end;
					})

					local Button = Load:Button({
						Title = "Copy Key Url : Get Key (Lootlabs)";
						Desc = nil;
						Callback = function()
							setclipboard("https://ads.luarmor.net/get_key?for=lootlabs-WaiFucNsNhGC")

							Library:Notify({
                            Title = "Information",
                            Content = "Copied Key URL",
                            Duration = 5,
							Background = "rbxassetid://90804827107744"
								})
						end;
					})

					local Button = Load:Button({
						Title = "Copy Script Loader";
						Desc = nil;
						Callback = function()
							RunLoader(true)
							Library:Notify({
                            Title = "Information",
                            Content = "Copied Script Loader",
                            Duration = 5,
							Background = "rbxassetid://90804827107744"
								})
						end;
					})

					local Button = Load:Button({
						Name = "Destroy";
						Desc = "Destroys Script";
						Callback = function(self)
							Window:Close(); getgenv().STERLINGLOADERINSTANCES[Library] = nil
						end;
					})
        
			local Settings = Window:Tab({
				Title = "Settings";
				Desc = nil;
				Icon = "rbxassetid://87579944956614";
				Callback = function(self)
					
				end;
			})
				Interfaces.Main = Interfaces.Main or {
					Label = {};
					Paragraph = {};
					Button = {};
					Toggle = {};
					Dropdown = {};
					Slider = {};
					Input = {};
				}
				
				        local Main = Settings:Section({ 
                        Title = "Settings",
                        TextXAlignment = "Left",
                        TextSize = 17, -- Default Size
                    })
                    
					Interfaces.Main.Button["Save-Settings"] = Settings:Button({
						Title = "Save Settings";
						Desc = nil;
                        Locked = false,
						Callback = function(self)
							if not isfolder(RootDir) then
								makefolder(RootDir)
							end
							
							if not isfolder(Dir) then
								makefolder(Dir)
							end

							writefile(Dir .. "/config.json", HttpService:JSONEncode(Data))
						end;
					})

					Interfaces.Main.Button["Reset-Settings"] = Settings:Button({
						Title = "Reset Settings",
						Desc = nil;
						Callback = function(self)
							if not isfolder(RootDir) then
								makefolder(RootDir)
							end
							
							if not isfolder(Dir) then
								makefolder(Dir)
							end

							if isfile(Dir .. "/config.json") then
								delfile(Dir .. "/config.json")
							end
						end;
					});

					Interfaces.Main.Button["Copy-Settings"] = Settings:Button({
						Title = "Copy Settings";
						Desc = nil;
						Callback = function(self)
							if setclipboard then
								setclipboard(HttpService:JSONEncode(Data))
							end
						end;
					})

		getgenv().STERLINGLOADERINSTANCES[Library] = Window

if not InterfaceEnabled then
	task.spawn(function()
		RunLoader()
	end)

	Window:Close(); getgenv().STERLINGLOADERINSTANCES[Library] = nil
end
Window:SelectTab(1)
