-- Load the Orion Library
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()

-- Create the window for the UI
local window = OrionLib:MakeWindow({
    Name = "Sterling Hub",
    HidePremium = false,
})

-- Load the Orion Library
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()

-- Create the window for the UI
local window = OrionLib:MakeWindow({
    Name = "Sterling Hub",
    HidePremium = false,
})

-- Create a new tab for Stat Node redemption
local statNodeTab = window:MakeTab({
    Name = "Stat Node",
    Icon = "rbxassetid://4483345998",  -- Custom icon (use your own if needed)
    PremiumOnly = false
})

-- Create a section for redeeming stat nodes
local statNodeSection = statNodeTab:AddSection({
    Name = "Redeem Stat Node"
})

-- Variable to store the stat node input
local statNodeInput = ""

-- Textbox to enter the stat node name
statNodeSection:AddTextbox({
    Name = "Enter Stat Node",
    Default = "Tool Manipulation: Wind Scythe",  -- Example default value
    TextDisappear = false,  -- Keep the text visible after typing
    Callback = function(value)
        statNodeInput = value  -- Store the value entered in the textbox
    end
})

-- Button to redeem the stat node
statNodeSection:AddButton({
    Name = "Redeem Stat Node",
    Callback = function()
        if statNodeInput and statNodeInput ~= "" then
            -- Fire the remote to unlock the stat node
            game:GetService("ReplicatedStorage").Remotes.Server.Data.UnlockStatNode:InvokeServer(statNodeInput)
            
            -- Notify the user that the stat node has been redeemed
            OrionLib:MakeNotification({
                Name = "Stat Node Redeemed",
                Content = "You have redeemed: " .. statNodeInput,
                Image = "rbxassetid://4483345998",  -- Custom icon (use your own if needed)
                Time = 5
            })
        else
            -- If no stat node input is provided, notify the user
            OrionLib:MakeNotification({
                Name = "Error",
                Content = "Please enter a valid stat node.",
                Image = "rbxassetid://4483345998",  -- Custom icon (use your own if needed)
                Time = 5
            })
        end
    end
})


-- Create the Main tab
local mainTab = window:MakeTab({
    Name = "Main",
    Icon = "rbxassetid://4483345998",  -- Custom icon (use your own if needed)
    PremiumOnly = false
})

-- Quest Data
local ohTable1 = {
    ["type"] = "Band",
    ["set"] = "Shijo Town Set",
    ["rewards"] = {
        ["essence"] = 14,
        ["cash"] = 16050,
        ["exp"] = 2646000,
        ["chestMeter"] = 55
    },
    ["rewardsText"] = "$16050 | 2646000 EXP | 14 Mission Essence",
    ["difficulty"] = 2,
    ["title"] = "Defeat a band",
    ["amount"] = 3,
    ["level"] = 420,
    ["subtitle"] = "of 3 curse users",
    ["grade"] = "Special Grade"
}

-- Quest Loop Section
local questLoopSection = mainTab:AddSection({
    Name = "Quest Loop"
})

-- Variable to control the quest loop (starts off as false)
local questLoopEnabled = false

-- Function to start the quest loop
local function startQuestLoop()
    while questLoopEnabled do
        -- Fire the remote to take the quest
        game:GetService("ReplicatedStorage").Remotes.Server.Data.TakeQuest:InvokeServer(ohTable1)

        -- Wait for 3 seconds before pressing the "J" key (teleport to the quest location)
        wait(3)

        -- Simulate pressing the "J" key (teleport to the quest location)
        game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.J, false, game)

        -- Wait for 4 seconds before repeating the quest loop
        wait(4) -- Repeat every 4 seconds
    end
end

-- Checkbox to enable or disable the quest loop
questLoopSection:AddToggle({
    Name = "Enable Quest Loop",
    Default = false,
    Callback = function(value)
        questLoopEnabled = value
        if questLoopEnabled then
            startQuestLoop()  -- Start the quest loop when enabled
        end
    end
})

-- Automatically set mastery to 500 and cooldown to 0
local function setMasteryTo500()
    local masteries = game:GetService("Players").LocalPlayer.ReplicatedData:WaitForChild("masteries")
    for _, child in ipairs(masteries:GetChildren()) do
        if child:IsA("Folder") then
            local level = child:FindFirstChild("level")
            if level then
                level.Value = 500  -- Set mastery level to 500
            end
        end
    end
end

local function setCooldownTo0()
    local skills = game:GetService("ReplicatedStorage"):WaitForChild("Skills")
    for _, child in ipairs(skills:GetChildren()) do
        if child:IsA("Folder") then
            local cooldown = child:FindFirstChild("Cooldown")
            if cooldown then
                cooldown.Value = 0  -- Set cooldown to 0
            end
        end
    end
end

local function resetCooldowns()  -- This function restores cooldown to default
    local skills = game:GetService("ReplicatedStorage"):WaitForChild("Skills")
    for _, child in ipairs(skills:GetChildren()) do
        if child:IsA("Folder") then
            local cooldown = child:FindFirstChild("Cooldown")
            if cooldown then
                cooldown.Value = 10  -- Reset cooldown to a default value (example: 10 seconds)
            end
        end
    end
end

-- Function to set humanoid health to 0 within a specified range
local function instakillHumanoidsInRange(range)
    local player = game:GetService("Players").LocalPlayer
    local character = player.Character
    if not character then return end

    local humanoids = workspace.Objects.Mobs:GetChildren()

    -- Loop through all humanoids in the workspace and set health to 0 if within range
    for _, mob in ipairs(humanoids) do
        if mob:IsA("Model") and mob:FindFirstChild("Humanoid") then
            local humanoid = mob:FindFirstChild("Humanoid")
            local distance = (character.HumanoidRootPart.Position - mob.HumanoidRootPart.Position).Magnitude
            if distance <= range then
                humanoid.Health = 0  -- Set health to 0 for humanoids within the range
            end
        end
    end
end

-- Function to auto teleport to the nearest mob within a range
local function autoTeleportToMob(range)
    local player = game:GetService("Players").LocalPlayer
    local character = player.Character
    if not character then return end

    local closestMob
    local closestDistance = math.huge  -- Start with a very large number

    local humanoids = workspace.Objects.Mobs:GetChildren()

    -- Find the closest mob within range
    for _, mob in ipairs(humanoids) do
        if mob:IsA("Model") and mob:FindFirstChild("Humanoid") then
            local humanoid = mob:FindFirstChild("Humanoid")
            local distance = (character.HumanoidRootPart.Position - mob.HumanoidRootPart.Position).Magnitude
            if distance <= range and distance < closestDistance then
                closestDistance = distance
                closestMob = mob
            end
        end
    end

    -- Teleport to the closest mob
    if closestMob then
        character:SetPrimaryPartCFrame(closestMob.HumanoidRootPart.CFrame)
    end
end

-- Gamepass Integration Function (added from your code)
local function grantGamepasses()
    local gamepassIds = {"77102528", "77102481", "77103458", "259500454"} -- Replace with your game pass IDs
    local player = game:GetService("Players").LocalPlayer
    local replicatedData = player:WaitForChild("ReplicatedData")
    local gamepassesFolder = replicatedData:WaitForChild("gamepasses")

    for _, gamepassId in ipairs(gamepassIds) do
        local gamepassValue = gamepassesFolder:FindFirstChild(gamepassId)

        if not gamepassValue then
            -- If the BoolValue doesn't exist for the gamepass, create and add it
            gamepassValue = Instance.new("BoolValue")
            gamepassValue.Name = gamepassId
            gamepassValue.Value = true
            gamepassValue.Parent = gamepassesFolder
            print("Inserted BoolValue for game pass with ID:", gamepassId)
        else
            print("BoolValue for game pass with ID already exists:", gamepassId)
        end
    end
end

-- Instakill Mobs Section
local instakillSection = mainTab:AddSection({
    Name = "Instakill Mobs"
})

-- Slider to set the range for instakill (0 to 1000 units)
local range = 0
instakillSection:AddSlider({
    Name = "Set Range for Instakill",
    Min = 0,
    Max = 1000,
    Default = 0,
    Callback = function(value)
        range = value
        print("Selected range: " .. range)
    end
})

-- Checkbox to enable or disable instakill
local instakillEnabled = false
local instakillLoopConnection
instakillSection:AddToggle({
    Name = "Enable Instakill",
    Default = false,
    Callback = function(value)
        instakillEnabled = value
        if instakillEnabled then
            -- Start the loop for instakill
            instakillLoopConnection = game:GetService("RunService").Heartbeat:Connect(function()
                instakillHumanoidsInRange(range)
            end)
        else
            -- Stop the loop for instakill
            if instakillLoopConnection then
                instakillLoopConnection:Disconnect()
            end
        end
    end
})

-- Auto Teleport to Mob Section
local teleportSection = mainTab:AddSection({
    Name = "Auto Teleport to Mob"
})

-- Slider to set the range for auto teleport (0 to 1000 units)
local teleportRange = 0
teleportSection:AddSlider({
    Name = "Set Range for Auto Teleport",
    Min = 0,
    Max = 1000,
    Default = 0,
    Callback = function(value)
        teleportRange = value
        print("Selected teleport range: " .. teleportRange)
    end
})

-- Checkbox to enable or disable auto teleport
local teleportEnabled = false
teleportSection:AddToggle({
    Name = "Enable Auto Teleport",
    Default = false,
    Callback = function(value)
        teleportEnabled = value
        if teleportEnabled then
            -- Start the loop for auto teleport
            game:GetService("RunService").Heartbeat:Connect(function()
                autoTeleportToMob(teleportRange)
            end)
        end
    end
})

-- Create the Misc tab
local miscTab = window:MakeTab({
    Name = "Misc",
    Icon = "rbxassetid://4483345998",  -- Custom icon (use your own if needed)
    PremiumOnly = false
})

-- Skill Settings Section in Misc
local skillSettingsSection = miscTab:AddSection({
    Name = "Skill Settings"
})

-- Button for assigning mastery to 500
skillSettingsSection:AddButton({
    Name = "500 Masteries",
    Callback = function()
        setMasteryTo500()
        OrionLib:MakeNotification({
            Name = "Masteries Set to 500",
            Content = "All mastery values have been set to 500!",
            Image = "rbxassetid://4483345998",  -- Custom icon (use your own if needed)
            Time = 5
        })
    end
})

-- No Cooldowns Toggle Button
local cooldownToggled = false  -- Track cooldown state
skillSettingsSection:AddButton({
    Name = "Toggle No Cooldowns",
    Callback = function()
        if cooldownToggled then
            resetCooldowns()  -- Restore cooldown to default
            OrionLib:MakeNotification({
                Name = "Cooldowns Restored",
                Content = "Cooldowns have been restored to default values.",
                Image = "rbxassetid://4483345998",  -- Custom icon (use your own if needed)
                Time = 5
            })
        else
            setCooldownTo0()  -- Set cooldown to 0
            OrionLib:MakeNotification({
                Name = "Cooldowns Set to 0",
                Content = "All cooldown values have been set to 0!",
                Image = "rbxassetid://4483345998",  -- Custom icon (use your own if needed)
                Time = 5
            })
        end
        cooldownToggled = not cooldownToggled  -- Toggle the state
    end
})

-- Gamepass Section in Misc
local gamepassSection = miscTab:AddSection({
    Name = "Gamepass"
})

gamepassSection:AddButton({
    Name = "Grant Gamepasses",
    Callback = function()
        -- Call the function to grant the gamepass
        grantGamepasses()
        OrionLib:MakeNotification({
            Name = "Gamepass Granted",
            Content = "Gamepasses have been granted successfully.",
            Image = "rbxassetid://4483345998",  -- Custom icon (use your own if needed)
            Time = 5
        })
    end
})

-- Skill Setup Section in Misc
local skillSetupSection = miscTab:AddSection({
    Name = "Skill Setup"
})

-- Create a dropdown for selecting mode (Innates or Skills)
local modeSelected = "Innates"
skillSetupSection:AddDropdown({
    Name = "Select Mode",
    Options = {"Innates", "Skills"},
    Default = 1,
    Callback = function(value)
        modeSelected = value
    end
})

-- Input box for skill name
local skillName
skillSetupSection:AddTextbox({
    Name = "Enter Skill/Innate Skill",
    Default = "",
    TextDisappear = false,  -- Changed to false so text stays visible
    Callback = function(value)
        print("Entered skill: " .. value)
        skillName = value  -- Store the value entered in the textbox here
    end
})

-- Dropdown for selecting keybind (B, C, etc.)
local keybindSelected = "B"
skillSetupSection:AddDropdown({
    Name = "Select Keybind",
    Options = {"B", "C", "G", "T", "V", "X", "Y", "Z"},
    Default = 1,
    Callback = function(value)
        keybindSelected = value
    end
})

-- Button to assign the skill
skillSetupSection:AddButton({
    Name = "Assign Skill/Innate Skill",
    Callback = function()
        -- Ensure the skillName is set
        if not skillName or skillName == "" then
            OrionLib:MakeNotification({
                Name = "Error",
                Content = "Please enter a skill name.",
                Image = "rbxassetid://4483345998",  -- Custom icon (use your own if needed)
                Time = 5
            })
            return
        end

        -- Handle skill assignment to the selected mode and keybind
        local player = game:GetService("Players").LocalPlayer
        local techniques = player:WaitForChild("ReplicatedData"):WaitForChild("techniques")
        local selectedFolder
        if modeSelected == "Innates" then
            selectedFolder = techniques:WaitForChild("innates")
        elseif modeSelected == "Skills" then
            selectedFolder = techniques:WaitForChild("skills")
        end

        if selectedFolder then
            local stringValue = selectedFolder:FindFirstChild(keybindSelected)
            if stringValue and stringValue:IsA("StringValue") then
                stringValue.Value = skillName
                print("Skill assigned: " .. skillName)
                OrionLib:MakeNotification({
                    Name = "Skill Assigned",
                    Content = "The skill '" .. skillName .. "' has been assigned to " .. keybindSelected,
                    Image = "rbxassetid://4483345998",  -- Custom icon (use your own if needed)
                    Time = 5
                })
            else
                OrionLib:MakeNotification({
                    Name = "Error",
                    Content = "No StringValue found for " .. keybindSelected .. " in " .. modeSelected,
                    Image = "rbxassetid://4483345998",  -- Custom icon (use your own if needed)
                    Time = 5
                })
            end
        else
            OrionLib:MakeNotification({
                Name = "Error",
                Content = "Selected folder (" .. modeSelected .. ") does not exist.",
                Image = "rbxassetid://4483345998",  -- Custom icon (use your own if needed)
                Time = 5
            })
        end
    end
})

-- Add the Note section in Misc
local noteSection = miscTab:AddSection({
    Name = "Note"
})

noteSection:AddLabel("Note: The skill format should be like this:")
noteSection:AddLabel("(Innate Name): (Innate Skill) for Innates.")
noteSection:AddLabel("For Domain Expansions, use this format: Domain Expansion: (Domain Name)")

-- Finalize setup and initialize
OrionLib:Init()
