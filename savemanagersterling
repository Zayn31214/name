local SaveManager = {}

-- Settings for the save file
local configFolder = "Sterling Hub"
local configFileName = "settings.json"

-- Create the config folder and load the config file (if available)
local function loadConfig()
    local data = game:GetService("DataStoreService"):GetDataStore(configFolder)
    local success, result = pcall(function()
        return data:GetAsync(configFileName)
    end)

    if success and result then
        return game:GetService("HttpService"):JSONDecode(result)
    end
    return {}
end

local function saveConfig(config)
    local data = game:GetService("DataStoreService"):GetDataStore(configFolder)
    local success, errorMessage = pcall(function()
        local encodedData = game:GetService("HttpService"):JSONEncode(config)
        data:SetAsync(configFileName, encodedData)
    end)

    if not success then
        warn("Failed to save config: " .. errorMessage)
    end
end

-- Table to hold the saved settings
local settings = loadConfig()

-- Function to get a setting value from the saved data (or default value if not set)
function SaveManager:Get(settingName, defaultValue)
    if settings[settingName] ~= nil then
        return settings[settingName]
    else
        return defaultValue
    end
end

-- Function to set a setting value
function SaveManager:Set(settingName, value)
    settings[settingName] = value
    saveConfig(settings)
end

-- Utility function to save the state of a toggle (boolean)
function SaveManager:SaveToggle(toggleName, state)
    self:Set(toggleName, state)
end

-- Utility function to save the value of a slider
function SaveManager:SaveSlider(sliderName, value)
    self:Set(sliderName, value)
end

-- Utility function to save the selected value from a dropdown
function SaveManager:SaveDropdown(dropdownName, selectedOption)
    self:Set(dropdownName, selectedOption)
end

-- Utility function to load the state of a toggle
function SaveManager:LoadToggle(toggleName, defaultValue)
    return self:Get(toggleName, defaultValue)
end

-- Utility function to load the value of a slider
function SaveManager:LoadSlider(sliderName, defaultValue)
    return self:Get(sliderName, defaultValue)
end

-- Utility function to load the selected value from a dropdown
function SaveManager:LoadDropdown(dropdownName, defaultValue)
    return self:Get(dropdownName, defaultValue)
end

return SaveManager
